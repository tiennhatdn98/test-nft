<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="Mocha Tests" time="45.165" tests="58" failures="4">
  <testsuite name="Root Suite" timestamp="2023-02-02T07:57:52" tests="0" time="0.000" failures="0">
  </testsuite>
  <testsuite name="ERC721" timestamp="2023-02-02T07:57:52" tests="0" file="/home/nhat-truong/Projects/test-nft/test/ERC721.ts" time="0.000" failures="0">
  </testsuite>
  <testsuite name="1. Initialize" timestamp="2023-02-02T07:57:52" tests="1" file="/home/nhat-truong/Projects/test-nft/test/ERC721.ts" time="1.895" failures="0">
    <testcase name="ERC721 1. Initialize 1.1. Should assign states successfully" time="0.128" classname="1.1. Should assign states successfully">
    </testcase>
  </testsuite>
  <testsuite name="2. Mint" timestamp="2023-02-02T07:57:54" tests="13" file="/home/nhat-truong/Projects/test-nft/test/ERC721.ts" time="7.703" failures="0">
    <testcase name="ERC721 2. Mint 2.1. Should be fail when recipient address is zero address" time="0.057" classname="2.1. Should be fail when recipient address is zero address">
    </testcase>
    <testcase name="ERC721 2. Mint 2.2. Should be fail when recipient address is a contract address" time="0.018" classname="2.2. Should be fail when recipient address is a contract address">
    </testcase>
    <testcase name="ERC721 2. Mint 2.3. Should be fail when token URI is empty" time="0.033" classname="2.3. Should be fail when token URI is empty">
    </testcase>
    <testcase name="ERC721 2. Mint 2.4. Should be fail when amount is equal 0" time="0.042" classname="2.4. Should be fail when amount is equal 0">
    </testcase>
    <testcase name="ERC721 2. Mint 2.5. Should be fail when price is equal 0" time="0.017" classname="2.5. Should be fail when price is equal 0">
    </testcase>
    <testcase name="ERC721 2. Mint 2.6. Should be fail when amount is less than price" time="0.022" classname="2.6. Should be fail when amount is less than price">
    </testcase>
    <testcase name="ERC721 2. Mint 2.7. Should be fail when user pays native token and msg.value is not equal amount" time="0.077" classname="2.7. Should be fail when user pays native token and msg.value is not equal amount">
    </testcase>
    <testcase name="ERC721 2. Mint 2.8. Should be fail when user pays cash test token and payment token is not a contract address" time="0.021" classname="2.8. Should be fail when user pays cash test token and payment token is not a contract address">
    </testcase>
    <testcase name="ERC721 2. Mint 2.9. Should be fail when local government address is zero address" time="0.018" classname="2.9. Should be fail when local government address is zero address">
    </testcase>
    <testcase name="ERC721 2. Mint 2.10. Should be fail when local government address is a contract address" time="0.018" classname="2.10. Should be fail when local government address is a contract address">
    </testcase>
    <testcase name="ERC721 2. Mint 2.11. Should be fail when transaction is not signed by verifier" time="0.067" classname="2.11. Should be fail when transaction is not signed by verifier">
    </testcase>
    <testcase name="ERC721 2. Mint 2.12. Should mint successfully when user pays native token" time="0.221" classname="2.12. Should mint successfully when user pays native token">
    </testcase>
    <testcase name="ERC721 2. Mint 2.13. Should mint successfully when user pays cash test token" time="0.312" classname="2.13. Should mint successfully when user pays cash test token">
    </testcase>
  </testsuite>
  <testsuite name="3. Set Admin" timestamp="2023-02-02T07:58:01" tests="4" file="/home/nhat-truong/Projects/test-nft/test/ERC721.ts" time="1.612" failures="0">
    <testcase name="ERC721 3. Set Admin 3.1. Should be fail when caller is not the owner" time="0.011" classname="3.1. Should be fail when caller is not the owner">
    </testcase>
    <testcase name="ERC721 3. Set Admin 3.2. Should be fail when setting zero address" time="0.014" classname="3.2. Should be fail when setting zero address">
    </testcase>
    <testcase name="ERC721 3. Set Admin 3.3. Should be fail when setting contract address" time="0.016" classname="3.3. Should be fail when setting contract address">
    </testcase>
    <testcase name="ERC721 3. Set Admin 3.4. Should set successfully" time="0.022" classname="3.4. Should set successfully">
    </testcase>
  </testsuite>
  <testsuite name="4. Set Verifier" timestamp="2023-02-02T07:58:03" tests="4" file="/home/nhat-truong/Projects/test-nft/test/ERC721.ts" time="2.015" failures="0">
    <testcase name="ERC721 4. Set Verifier 4.1. Should be fail when caller is not the owner" time="0.015" classname="4.1. Should be fail when caller is not the owner">
    </testcase>
    <testcase name="ERC721 4. Set Verifier 4.2. Should be fail when setting zero address" time="0.029" classname="4.2. Should be fail when setting zero address">
    </testcase>
    <testcase name="ERC721 4. Set Verifier 4.3. Should be fail when setting a contract address" time="0.015" classname="4.3. Should be fail when setting a contract address">
    </testcase>
    <testcase name="ERC721 4. Set Verifier 4.4. Should set successfully" time="0.189" classname="4.4. Should set successfully">
    </testcase>
  </testsuite>
  <testsuite name="5. Set Token URI" timestamp="2023-02-02T07:58:05" tests="5" file="/home/nhat-truong/Projects/test-nft/test/ERC721.ts" time="3.128" failures="0">
    <testcase name="ERC721 5. Set Token URI 5.1. Should be fail when token ID is nonexistent" time="0.018" classname="5.1. Should be fail when token ID is nonexistent">
    </testcase>
    <testcase name="ERC721 5. Set Token URI 5.2. Should be fail when new token URI is empty" time="0.024" classname="5.2. Should be fail when new token URI is empty">
    </testcase>
    <testcase name="ERC721 5. Set Token URI 5.3. Should be fail when transaction is not signed by verifier" time="0.026" classname="5.3. Should be fail when transaction is not signed by verifier">
    </testcase>
    <testcase name="ERC721 5. Set Token URI 5.4. Should be fail when signature data is invalid" time="0.025" classname="5.4. Should be fail when signature data is invalid">
    </testcase>
    <testcase name="ERC721 5. Set Token URI 5.5. Should set successfully" time="0.046" classname="5.5. Should set successfully">
    </testcase>
  </testsuite>
  <testsuite name="6. Withdraw" timestamp="2023-02-02T07:58:08" tests="7" file="/home/nhat-truong/Projects/test-nft/test/ERC721.ts" time="7.701" failures="0">
    <testcase name="ERC721 6. Withdraw 6.1. Should be fail when caller is not owner" time="0.016" classname="6.1. Should be fail when caller is not owner">
    </testcase>
    <testcase name="ERC721 6. Withdraw 6.2. Should be fail when recipient address is zero addess" time="0.016" classname="6.2. Should be fail when recipient address is zero addess">
    </testcase>
    <testcase name="ERC721 6. Withdraw 6.3. Should be fail when amount is equal 0" time="0.015" classname="6.3. Should be fail when amount is equal 0">
    </testcase>
    <testcase name="ERC721 6. Withdraw 6.4. Should be fail when owner withdraw native token amount greater than withdrawable amount" time="0.022" classname="6.4. Should be fail when owner withdraw native token amount greater than withdrawable amount">
    </testcase>
    <testcase name="ERC721 6. Withdraw 6.5. Should be fail when owner withdraw test cash token amount greater than withdrawable amount" time="0.024" classname="6.5. Should be fail when owner withdraw test cash token amount greater than withdrawable amount">
    </testcase>
    <testcase name="ERC721 6. Withdraw 6.6. Should be successful when owner withdraws native token" time="0.140" classname="6.6. Should be successful when owner withdraws native token">
    </testcase>
    <testcase name="ERC721 6. Withdraw 6.7. Should be successful when owner withdraws cash test token" time="0.364" classname="6.7. Should be successful when owner withdraws cash test token">
    </testcase>
  </testsuite>
  <testsuite name="7. Transfer" timestamp="2023-02-02T07:58:16" tests="6" file="/home/nhat-truong/Projects/test-nft/test/ERC721.ts" time="12.346" failures="0">
    <testcase name="ERC721 7. Transfer 7.1. Should be fail when sender transfer token to self" time="0.117" classname="7.1. Should be fail when sender transfer token to self">
    </testcase>
    <testcase name="ERC721 7. Transfer 7.2. Should be fail when recipient address is zero address" time="0.268" classname="7.2. Should be fail when recipient address is zero address">
    </testcase>
    <testcase name="ERC721 7. Transfer 7.3. Should be fail when token is nonexistent" time="0.057" classname="7.3. Should be fail when token is nonexistent">
    </testcase>
    <testcase name="ERC721 7. Transfer 7.4. Should be fail when type of token is not normal" time="0.115" classname="7.4. Should be fail when type of token is not normal">
    </testcase>
    <testcase name="ERC721 7. Transfer 7.5. Should be fail when token is not owned by sender" time="0.019" classname="7.5. Should be fail when token is not owned by sender">
    </testcase>
    <testcase name="ERC721 7. Transfer 7.6. Should transfer successfully" time="0.116" classname="7.6. Should transfer successfully">
    </testcase>
  </testsuite>
  <testsuite name="8. Buy" timestamp="2023-02-02T07:58:28" tests="5" file="/home/nhat-truong/Projects/test-nft/test/ERC721.ts" time="4.180" failures="0">
    <testcase name="ERC721 8. Buy 8.1. Should be fail when buy a nonexistent token" time="0.028" classname="8.1. Should be fail when buy a nonexistent token">
    </testcase>
    <testcase name="ERC721 8. Buy 8.2. Should be fail when buy an owned token" time="0.020" classname="8.2. Should be fail when buy an owned token">
    </testcase>
    <testcase name="ERC721 8. Buy 8.3. Should be fail when type of token is not normal" time="0.066" classname="8.3. Should be fail when type of token is not normal">
    </testcase>
    <testcase name="ERC721 8. Buy 8.4. Should be successful when user buys a token paid by native token" time="0.255" classname="8.4. Should be successful when user buys a token paid by native token">
    </testcase>
    <testcase name="ERC721 8. Buy 8.5. Should be successful when user buys a token paid by test cash token" time="0.156" classname="8.5. Should be successful when user buys a token paid by test cash token">
    </testcase>
  </testsuite>
  <testsuite name="9. Donate" timestamp="2023-02-02T07:58:32" tests="4" file="/home/nhat-truong/Projects/test-nft/test/ERC721.ts" time="2.444" failures="0">
    <testcase name="ERC721 9. Donate 9.1. Should be fail when token is nonexistent" time="0.021" classname="9.1. Should be fail when token is nonexistent">
    </testcase>
    <testcase name="ERC721 9. Donate 9.2. Should be fail when caller does not own token" time="0.064" classname="9.2. Should be fail when caller does not own token">
    </testcase>
    <testcase name="ERC721 9. Donate 9.3. Should be fail when type of token is not Furusato" time="0.025" classname="9.3. Should be fail when type of token is not Furusato">
    </testcase>
    <testcase name="ERC721 9. Donate 9.4. Should donate successfully" time="0.082" classname="9.4. Should donate successfully">
    </testcase>
  </testsuite>
  <testsuite name="10. Get Token URI" timestamp="2023-02-02T07:58:35" tests="3" file="/home/nhat-truong/Projects/test-nft/test/ERC721.ts" time="1.779" failures="0">
    <testcase name="ERC721 10. Get Token URI 10.1. Should be fail when get a token is nonexistent" time="0.007" classname="10.1. Should be fail when get a token is nonexistent">
    </testcase>
    <testcase name="ERC721 10. Get Token URI 10.2. Should return exactly token URI" time="0.005" classname="10.2. Should return exactly token URI">
    </testcase>
    <testcase name="ERC721 10. Get Token URI 10.3. Should retrieve exacty token URI after setting token URI" time="0.033" classname="10.3. Should retrieve exacty token URI after setting token URI">
    </testcase>
  </testsuite>
  <testsuite name="Verify Signature" timestamp="2023-02-02T07:58:37" tests="3" file="/home/nhat-truong/Projects/test-nft/test/VerifySignature.ts" time="0.250" failures="3">
    <testcase name="Verify Signature 1. Should verify fail when signer is wrong" time="0.000" classname="1. Should verify fail when signer is wrong">
      <failure message="verifySignature.getMessageHash is not a function" type="TypeError"><![CDATA[TypeError: verifySignature.getMessageHash is not a function
    at Context.<anonymous> (test/VerifySignature.ts:33:40)]]></failure>
    </testcase>
    <testcase name="Verify Signature 2. Should verify fail when data is wrong" time="0.002" classname="2. Should verify fail when data is wrong">
      <failure message="verifySignature.getMessageHash is not a function" type="TypeError"><![CDATA[TypeError: verifySignature.getMessageHash is not a function
    at Context.<anonymous> (test/VerifySignature.ts:70:40)]]></failure>
    </testcase>
    <testcase name="Verify Signature 3. Should verify successfully" time="0.003" classname="3. Should verify successfully">
      <failure message="verifySignature.getMessageHash is not a function" type="TypeError"><![CDATA[TypeError: verifySignature.getMessageHash is not a function
    at Context.<anonymous> (test/VerifySignature.ts:97:40)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="ERC721 Integration" timestamp="2023-02-02T07:58:37" tests="3" file="/home/nhat-truong/Projects/test-nft/test/integration/ERC721.ts" time="0.077" failures="1">
    <testcase name="ERC721 Integration &quot;before each&quot; hook for &quot;1.1. Mint token by paying native token =&gt; Transfer token =&gt; Owner of contract withdraws&quot;" time="0.076" classname="&quot;before each&quot; hook for &quot;1.1. Mint token by paying native token =&gt; Transfer token =&gt; Owner of contract withdraws&quot;">
      <failure message="artist is not defined" type="ReferenceError"><![CDATA[ReferenceError: artist is not defined
    at Context.<anonymous> (test/integration/ERC721.ts:47:59)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:95:5)]]></failure>
    </testcase>
  </testsuite>
</testsuites>